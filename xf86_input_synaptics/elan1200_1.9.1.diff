diff --git a/src/synaptics.c b/src/synaptics.c
index 1df1ca7..a846d82 100644
--- a/src/synaptics.c
+++ b/src/synaptics.c
@@ -1977,6 +1977,23 @@ HandleTapProcessing(SynapticsPrivate * priv, struct SynapticsHwState *hw,
               (abs(hw->y - priv->touch_on.y) >= para->tap_move))));
     press = (hw->left || hw->right || hw->middle);
 
+
+    if (release) {
+        // The artificial releases are followed by the artificial presses
+        // thus I just set a delay and trigger a release if there were
+        // no presses after that, remember a timestamp to hide latency
+        priv->delayed = TRUE;
+        priv->delayed_prevFingers = priv->prevFingers;
+        return 22;
+    }
+
+    if (priv->delayed) {
+        release = (priv->prevFingers == hw->numFingers &&
+                   priv->delayed_prevFingers > hw->numFingers);
+        priv->delayed = FALSE;
+    }
+
+
     if (touch) {
         priv->touch_on.x = hw->x;
         priv->touch_on.y = hw->y;
@@ -1985,6 +2002,7 @@ HandleTapProcessing(SynapticsPrivate * priv, struct SynapticsHwState *hw,
     else if (release) {
         priv->touch_on.millis = now;
     }
+
     if (hw->z > para->finger_high)
         if (priv->tap_max_fingers < hw->numFingers)
             priv->tap_max_fingers = hw->numFingers;
diff --git a/src/synapticsstr.h b/src/synapticsstr.h
index 33524e5..574f2cf 100644
--- a/src/synapticsstr.h
+++ b/src/synapticsstr.h
@@ -268,6 +268,8 @@ struct _SynapticsPrivateRec {
     } scroll;
     int count_packet_finger;    /* packet counter with finger on the touchpad */
     int button_delay_millis;    /* button delay for 3rd button emulation */
+    Bool delayed;               /* Is a release delayed */
+    int delayed_prevFingers;    /* Prev fingers before a delay */
     Bool prev_up;               /* Previous up button value, for double click emulation */
     enum FingerState finger_state;      /* previous finger state */
     CARD32 last_motion_millis;  /* time of the last motion */
